package com.lianlian.ew.open.request;

import com.lianlian.ew.open.domain.AdditionalInfo;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotBlank;

import javax.validation.Valid;
import javax.validation.constraints.Pattern;
import java.util.Date;
import java.util.List;

/**
 * Request Payment URL Request
 *
 * @author xujs002
 */
@Getter
@Setter
@ToString
public class RequestPayUrlReq extends BaseOpenApiReq {

    private static final long serialVersionUID = -710038126758210090L;


    /**
     * The idempotent value generated by the client must be unique on each request.
     * Requests with the same request_id will be return last Request Payment URL if exists.
     * The parameter contains a maximum of 128 characters.
     */
    @NotBlank(message = "request_id is required")
    private String requestId;


    /**
     * The amount to collect, main currency unit, rounded up to 2 decimal places.
     */
    @NotBlank(message = "amount is required.")
    @Pattern(regexp = "^(?=.*[1-9])\\d+(\\.\\d{1,2})?$", flags = Pattern.Flag.CASE_INSENSITIVE, message = "illegal amount value.")
    @Length(max = 13, message = "amount is too large.")
    private String amount;


    /**
     * The currency to collect (in three-letter ISO 4217 format).
     */
    @NotBlank(message = "currency is required.")
    private String currency;


    /**
     * Purpose of Request Payment.
     */
    @NotBlank(message = "purpose is required.")
    private String purpose;


    /**
     * This is the postscript information visible to the payer.
     */
    private String reference;


    /**
     * Set of key-value pairs that you can attach the business information according to Lianlian's requirements.
     */
    @Valid
    private List<AdditionalInfo> additionalInfo;


    /**
     * Expire time for this Request Payment. Measured in milliseconds since the Unix epoch.
     */
    private Date expireTime;

    //@Pattern(regexp = "^http(s)?://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)?$", flags = Pattern.Flag.CASE_INSENSITIVE, message = "illegal return_url value.")
    @NotBlank(message = "return_url is required.")
    private String returnUrl;
}
